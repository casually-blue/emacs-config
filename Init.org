#+TITLE: Emacs Configuration File

* Tangle init.el
We want init.el to load this config file
#+begin_src emacs-lisp :tangle ~/.config/emacs/init.el :eval no
  (org-babel-load-file "~/.config/emacs/Init.org")
#+end_src

* Have emacs put the installed package info in the correct place
#+begin_src emacs-lisp
  (setq custom-file (concat user-emacs-directory "/custom.el"))
#+end_src

* Clean Up emacs interface
** Hide splash screen
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
#+end_src

** Minimise status bar
#+begin_src emacs-lisp
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (set-fringe-mode 10)
  (menu-bar-mode -1)
#+end_src

** Set bell to not exist
#+begin_src emacs-lisp
  (setq ring-bell-function 'ignore)
#+end_src

* Set startup buffers
** Have emacs open to a terminal by default (disabled currently)
#+begin_src emacs-lisp :tangle no
(setq initial-buffer-choice (lambda () (term)))
#+end_src

* Initialize Use-Package with the correct settings
#+begin_src emacs-lisp
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			   ("org" . "https://orgmode.org/elpa")
			   ("elpa" . "https://elpa.gnu.org/packages/")))

  ;; Download package archive contents if they aren't downloaded
  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  ;; Install use-package
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src

* Setup Evil Mode
#+begin_src emacs-lisp
(setq evil-want-keybinding nil)
(use-package evil
  :config (evil-mode 1))
#+end_src
* Install Up-To-Date Org Mode
#+begin_src emacs-lisp
  (use-package org)
#+end_src

* Add command log
#+begin_src emacs-lisp
  (use-package command-log-mode)
#+end_src

* Set up ivy
#+begin_src emacs-lisp
  (use-package ivy
    :diminish
    :bind (("C-s" . swiper))
    :config
    (ivy-mode 1))

  (use-package ivy-rich
    :init
    (ivy-rich-mode 1))
#+end_src

* Use Counsel for command and file search
#+begin_src emacs-lisp
  (use-package counsel
    :bind (("M-x" . counsel-M-x)
    ("C-x b" . counsel-ibuffer)
    ("C-x C-f" . counsel-find-file)
    :map minibuffer-local-map
    ("C-r" . 'counsel-minibuffer-history))
    :config
    (setq ivy-initial-inputs-alist nil))

#+end_src

* Replace builtin Modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :custom (doom-modeline-height 15)
    :config
    (unless (package-installed-p 'doom-modeline) (all-the-icons-install-fonts)))
 
#+end_src

* Enable line numbers for general programming buffers, but disable for shells and org-mode
#+begin_src emacs-lisp
  (column-number-mode)
  (global-display-line-numbers-mode t)

  (dolist (mode '(org-mode-hook
		  term-mode-hook
		  shell-mode-hook
		  vterm-mode-hook
		  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

* Set program source code to use rainbow parens
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

* Enable which-key to show keybinds and their commands
#+begin_src emacs-lisp

(use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.3))
#+end_src  

* Install Helpful for better help information

#+begin_src emacs-lisp
  (use-package helpful
    :ensure t
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+end_src

* Install and set theme
#+begin_src emacs-lisp
  (use-package doom-themes)

  (load-theme 'doom-palenight t)
#+end_src

* Install Projectile for locating projects
#+begin_src emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    (when (file-directory-p "~/Programming")
      (setq projectile-project-search-path '("~/Programming")))
    (setq projectile-switch-project-action #'projectile-dired))
#+end_src

* Install Magit
** Basic Installation
#+begin_src emacs-lisp
  (use-package magit
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
#+end_src
** Install org mode compat bindings
#+begin_src emacs-lisp
  (use-package evil-collection)
#+end_src
* Setup LSP-Mode for code completion and error checking
** Create a function to load the correct header for programs
#+begin_src emacs-lisp
  (defun efs/lsp-mode-setup ()
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode))
#+end_src

** Install LspMode and enable correct header
#+begin_src emacs-lisp
   (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :hook (lsp-mode efs/lsp-mode-setup)
    :init
    (setq lsp-keymap-prefix "C-c l")
    :config
    (lsp-enable-which-key-integration t))
#+end_src

** Use company for completion and set to run after lsp is initialized
#+begin_src emacs-lisp   
  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind (:map company-active-map ("<tab>" . company-complete-selection))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))
#+end_src

** Install major modes for languages
*** Zig
    #+begin_src emacs-lisp
    (use-package zig-mode)
    #+end_src

*** Rust
    #+begin_src emacs-lisp
    (use-package rust-mode)
    #+end_src

* Register org templates with tempo
#+begin_src emacs-lisp
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
#+end_src
* Install shell
  #+begin_src emacs-lisp
  (use-package vterm)
  #+end_src
